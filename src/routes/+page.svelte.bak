<script lang="ts">
		// Do not include scripts directly from 'node_modules' in real projects.
		// Use build tools, like rollup, webpack, etc
	import DiagramEditor from '$lib/components/DiagramEditor/DiagramEditor.svelte';
	import CompanyPanel from '$lib/components/MenuPanels/CompanyPanel.svelte'
	import FactoryPanel from '$lib/components/MenuPanels/FactoryPanel.svelte'
	import DepartmentPanel from '$lib/components/MenuPanels/DepartmentPanel.svelte'
	import LinePanel from '$lib/components/MenuPanels/LinePanel.svelte'
	import EquipmentPanel from '$lib/components/MenuPanels/EquipmentPanel.svelte'
	import ControllerPanel from '$lib/components/MenuPanels/ControllerPanel.svelte'
	import ggraph from "$lib/components/DiagramEditor/classes/ggraph"
	import {_calcDAttr} from "$lib/components/DiagramEditor/classes/gutils"
	import graphutils from '$lib/scripts/graphutils'
	import { onMount} from "svelte";
		
	let graphtype = "TREE"
	let currentnode:any ={data:{type:'COMPANY',level:'level1',name:''}}
	let draw:any

	let graph = new ggraph(draw)
	


	// PANELS

	let panels:any [] = [
		{type:'COMPANY',component:CompanyPanel,name:'Company',level:'level1',img:'/image-company.svg'},
		{type:'FACTORY',component:FactoryPanel,name:'Factory',level:'level2',img:'/image-factory.svg'},
		{type:'DEPARTMENT',component:DepartmentPanel,name:'Department',level:'level3',img:'/image-department.svg'},
		{type:'LINE',component:LinePanel,name:'Line',level:'level4',img:'/image-line.svg'},
		{type:'EQUIPMENT',component:EquipmentPanel,name:'Equipment',level:'level5',img:'/image-equipment.svg'},
		{type:'CONTROLLER',component:ControllerPanel,name:'Controller',level:'level6',img:'/image-controller.svg'},
	]

	let component:any = panels.find((item:any) => item.type == 'COMPANY').component;

	let menuitems: any[] = [
        { name: 'EDIT', image: './edit.svg', item: null },
        { name: 'SGRAPH', image: './path.svg', item: null },
        { name: 'EXIT', image: './close.svg', item: null }
    ]

	const panelcontroller = (action:any,gnode:any)=>{
			const panel = document.querySelector('#editor-panel')
			switch(action){
				case "hide":
					panel.style.visibility = 'hidden'
					if(gnode){
						let img = 'image-company.svg'
						const pnl = panels.find((item:any)=>(item.type == gnode.data.type))
						if(pnl)
							img = pnl.img
						gnode.redrawtext(gnode.data.name,img)
					}
					break;
				case "show":
					currentnode = gnode
					if(gnode.data && gnode.data.type)
						component = panels.find((item:any) => (item.type == gnode.data.type)).component;
					else
						component = panels.find((item:any) => (item.type == 'COMPANY')).component; 
					panel.style.visibility = 'visible'
					break;
				case "visibility":
					return(panel.style.visibility)
					break;
			}
			return('OK')
		}

	let  nodeoptions:any = {
				horizontal:true,
				vertical:false,
				shapetype:'RECT',
				width:110,
				height:80,
				panelcontroller: panelcontroller,
				menuitems: menuitems,
			}
	
	graph.setPanelcontroller(panelcontroller)
	
	const mainmenusave = ()=>{
		let tree:any
		if(graph.graph.nodes.length > 0){
			tree = graphutils.getTreeFromGraph(graph.graph,graph.graph.nodes[0])
		}
		
			console.log(tree)
			
	}

	const mainmenuload = ()=>{
		console.log("LOAD")
	}

	const mainmenuimport = ()=>{
		console.log("IMPORT")
		const element = document.getElementById("file-graph-input")
		if(element)
			element.click()

	}

	const mainmenuexport = ()=>{
		console.log("EXPORT")
		let graphname:any='UPLOAD.json'
		if(graph.graph && graph.graph.gnodes.length >0)
			graphname = graph.graph.gnodes[0].data.name +'.json'
		upload(graphname)
		
	}

	const  mainmenuclear = ()=>{
		console.log("CLEAR")
		graph.clear()
	}

	const upload = async (graphname:any)=>{
		// AVOID CYCLIC REFERENCE IN JSON OBJECT
		try{
			let textFileUrl = null;
			//const jsontree = await getTreeFile($token,$currentcompany.name)
			const graphToSave = {nodes:graph.graph.nodes,paths:graph.graph.paths,svg:graph.graph.svg}
			let fileData = new Blob([JSON.stringify(graphToSave)], {type: 'text/plain'});
			    if (textFileUrl !== null) {
					window.URL.revokeObjectURL(textFile);
				}		
			textFileUrl = window.URL.createObjectURL(fileData);
			var a = document.createElement("a");
			a.href = textFileUrl
			a.download = graphname;
			a.click(); 
		}catch(error){
			console.log(error)
		}
		
   }

   
	const  readFile = async function(evt:any) {
		
		let file = evt.target.files[0];
		const fileContent = await file.text();
		let graphtml = JSON.parse(fileContent)
		graph.rebuild(graphtml,panels,nodeoptions)
	}
	
	
	</script>

	<div class="editor-container">
			<DiagramEditor {nodeoptions} {graphtype} graph={graph} bind:draw={draw} bind:currentnode={currentnode} {panelcontroller} {panels} bind:component={component} menuenabled={true}  {mainmenuclear} {mainmenusave} {mainmenuimport} {mainmenuexport} {mainmenuload}/>
			<DiagramEditor {graphtype} graph={graphFunctions} bind:draw={draw} bind:currentnode={currentnode} {panelcontroller} {panels} bind:component={component} menuenabled={false} {menubuild} {mainmenuclear} {mainmenusave} {mainmenuimport} {mainmenuexport} {mainmenuload}/>

			<input id="file-graph-input"name="file-graph-input" type='file' accept=".json" style="visibility:hidden;" on:change={readFile}>
	</div>

<style>
.editor-container{
	position:absolute;
}
</style>